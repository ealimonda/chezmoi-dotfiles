"*******************************************************************************************************************
"* Config files                                                                                                    *
"*******************************************************************************************************************
"* File:             .vimrc                                                                                        *
"* Copyright:        (c) 2011-2017 alimonda.com; Emanuele Alimonda                                                 *
"*                   Public Domain                                                                                 *
"*******************************************************************************************************************

" Note: This file uses folding. If you don't know how to unfold, press zR or check :help folding.

" Base settings [[[1

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Allow modelines
set modeline
set modelines=5

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

"if has("vms")
"	set nobackup		" do not keep a backup file, use versions instead
"else
"	set backup		" keep a backup file
"endif
" Don't write annoying *~ files
set nowritebackup " nowb
set nobackup " nobk

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" Plug [[[1
let g:plug_window = 'topleft new'
call plug#begin('~/.vim/plugged')

Plug 'will133/vim-dirdiff', { 'on': 'DirDiff' }
Plug 'chrisbra/NrrwRgn' ", { 'on': ['NarrowRegion', 'NR', 'NarrowWindow', 'NW', 'NRV', 'NUD', 'NPrepare', 'NRP'] }
Plug 'vim-scripts/Tagbar' ", { 'on': 'TagbarToggle' }
Plug 'gregsexton/gitv', { 'on': 'Gitv' }
Plug 'haya14busa/incsearch.vim', { 'on': ['<Plug>(incsearch-forward)', '<Plug>(incsearch-backward)', '<Plug>(incsearch-stay)'] }
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'myusuf3/numbers.vim'
Plug 'vim-syntastic/syntastic'
Plug 'mbbill/undotree', { 'on': ['UndotreeToggle', 'UndotreeShow'] }
Plug 'Shougo/neoyank.vim', { 'on': 'Unite' }
Plug 'Shougo/unite-outline', { 'on': 'Unite' }
Plug 'Shougo/unite.vim', { 'on': 'Unite' }
Plug 'Shougo/vimproc.vim', { 'on': 'Unite', 'do': 'make' }
Plug 'tpope/vim-afterimage'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch', { 'on': ['Make', 'Dispatch', 'FocusDispatch', 'Focus', 'Start'] }
Plug 'junegunn/vim-easy-align', { 'on': ['EasyAlign', '<Plug>(EasyAlign)'] }
Plug 'tpope/vim-eunuch', { 'on': ['Remove', 'Unlink', 'Move', 'Rename', 'Chmod', 'Mkdir', 'Find', 'Locate', 'Wall', 'SudoWrite', 'SudoEdit'] }
Plug 'kopischke/vim-fetch'
Plug 'tpope/vim-fugitive' ", { 'on': ['Gedit', 'Gsplit', 'Gvsplit', 'Gtabedit', 'Gdiff', 'Gstatus', 'Gblame', 'Gmove', 'Gremove', 'Ggrep', 'Glog', 'Gread', 'Gbrowse', 'Git'] }
Plug 'tpope/vim-rhubarb' ", { 'on': 'Gbrowse' }
Plug 'airblade/vim-gitgutter'
Plug 'thinca/vim-localrc'
Plug 'terryma/vim-multiple-cursors'
Plug 'b4winckler/vim-objc', { 'for': 'objc' }
Plug 'tpope/vim-obsession', { 'on': 'Obsess' }
Plug 'tpope/vim-repeat'
Plug 'kshenoy/vim-signature'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'lumiliet/vim-twig' ", { 'for': 'twig' }
Plug 'tpope/vim-unimpaired'
Plug 'justinmk/vim-sneak'
Plug 'derekwyatt/vim-fswitch', { 'for': ['c', 'cpp'] }
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'embear/vim-foldsearch', { 'on': ['Fw', 'Fs', 'Fp', 'FS', 'Fl', 'Fc', 'Fi', 'Fd', 'Fe'] }
Plug 'ealimonda/kirikiri.vim', { 'for': 'ks' }
Plug 'Aixile/tjs.vim', { 'for': 'ks' }
Plug 't9md/vim-quickhl', { 'on': ['QuickhlCwordToggle', '<Plug>(quickhl-manual-this-whole-word)', '<Plug>(quickhl-manual-reset)'] }
Plug 'ap/vim-css-color', { 'for': 'css' }
Plug 'cespare/vim-toml', { 'branch': 'main', 'for': 'toml' }
Plug 'alker0/chezmoi.vim'

call plug#end()

" Additional settings [[[1

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
	set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
	syntax on
endif
" Set nice colors
if &t_Co >= 256 || has("gui_running")
	let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
	let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
	{{- if or .os.wsl .os.windows }}
	set notermguicolors
	{{- else }}
	set termguicolors
	{{- end }}
	colorscheme skittles_berry
elseif &t_Co >= 88
	colorscheme torte
endif

" I like highlighting strings inside C comments
let c_comment_strings = 1
let c_space_errors = 1

" Line numbers
set number " nu

" Disable search highlight
set nohlsearch " nohls

" Folding for c files
set foldmethod=syntax
set foldnestmax=10
set nofoldenable

" Tab-completion mode
set wildmenu
set wildmode=longest:full,list,full

" prevent swapfiles in the current directory, since dropbox is broken
if has("mac")
	set directory=~/Library/Caches/org.vim.MacVim//,/var/tmp//,/tmp//,.
elseif has("win32")
	set directory=
else
	set directory=/var/tmp//,/tmp//,.
endif

" highlight whitespace in a meaningful way
set listchars=eol:¶,tab:\|_,trail:·,extends:>,precedes:<,nbsp:•

" Set max number of tabs to 50
set tabpagemax=50

" Show cursor line/column
set cursorline
set nocursorcolumn

" Used i.e. by gitgutter
set updatetime=1000
highlight GitGutterAdd    guifg=#009900 guibg=#000000 ctermfg=2 ctermbg=0
highlight GitGutterChange guifg=#bbbb00 guibg=#000000 ctermfg=3 ctermbg=0
highlight GitGutterDelete guifg=#ff2222 guibg=#000000 ctermfg=1 ctermbg=0

" Various Mac-only settings [[[1
" (note: some of them would work on other platforms too)
"if v:progname == "Vim"
if has("gui_macvim")
	" A nice font
	set gfn=Rec\ Mono\ Emi:h11,Menlo:h11 " guifont
	" Integrated terminal ANSI colors
	let g:terminal_ansi_colors = [
		\ '#222222', '#CC000D',
		\ '#41D411', '#FFB900',
		\ '#0B61D2', '#6C43A5',
		\ '#00D7EB', '#DFDFDF',
		\ '#444444', '#FB323E',
		\ '#9DFF76', '#FFEB41',
		\ '#218DFE', '#9A5FEB',
		\ '#67FFEF', '#F5F5F5',
		\ ]
elseif has("gui_win32")
	" Windows compatbility
	set gfn=Consolas:h10:b " guifont
	"set guifontwide=Yu\ Gothic:h10 "For windows to display mixed character sets
	set encoding=utf-8
endif

if has("gui_running")
	" set nowrap  " window word wrap
	set wrap  " window word wrap
	"set mousem=popup_setpos " mousemodel
	" Ring the bell on error
	set eb " errorbell
	set sel=inclusive "selection mode
	set go-=T " Remove toolbar
	set go-=b " Remove horizontal scrollbar
	" set go+=b " horizontal scrollbar
	" set go+=h " horizontal scrollbar sized on the current line only (snappier)
	set stal=2 " Force tab bar display
	" Use GUI vimpager
	let vimpager_use_gvim = 1
	" Confirm
	set confirm " cf
endif

if has("mac")
	set bkc=yes " backupcopy (preserve Finder tags, creation date)
endif

" Autocommands [[[1
" Only do this part when compiled with support for autocommands.
if has("autocmd")
	" Enable file type detection.
	" Use the default filetype settings, so that mail gets 'tw' set to 72,
	" 'cindent' is on in C files, etc.
	" Also load indent files, to automatically do language-dependent indenting.
	filetype plugin indent on

	" Put these in an autocmd group, so that we can delete them easily.
	augroup vimrcEx
		au!

		" For all text files set 'textwidth' to 78 characters.
		autocmd FileType text setlocal textwidth=78

		" When editing a file, always jump to the last known cursor position.
		" Don't do it when the position is invalid or when inside an event handler
		" (happens when dropping a file on gvim).
		autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal g`\"" |
			\ endif
	augroup END
else
	set autoindent		" always set autoindenting on
endif " has("autocmd")

" Mappings [[[1
" Don't use Ex mode, use Q for formatting
map Q gq

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Make sure to close related preview and location list before the current
" buffer when using \q
" nmap <leader>q :bdelete<CR>
nmap <leader>q :lclose<CR>:pclose<CR>:bdelete<CR>

" Smart Home function [[[1
" http://vim.wikia.com/wiki/Smart_home
function! SmartHome()
	let s:col = col(".")
	normal! ^
	if s:col == col(".")
		normal! 0
	endif
endfunction
nnoremap <silent> <Home> :call SmartHome()<CR>
inoremap <silent> <Home> <C-O>:call SmartHome()<CR>

" Hex editor [[[1
" ex command for toggling hex mode - define mapping if desired
command! -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function! ToggleHex()
	" hex mode should be considered a read-only operation
	" save values for modified and read-only for restoration later,
	" and clear the read-only flag for now
	let l:modified=&mod
	let l:oldreadonly=&readonly
	let &readonly=0
	let l:oldmodifiable=&modifiable
	let &modifiable=1
	if !exists("b:editHex") || !b:editHex
		" save old options
		let b:oldft=&ft
		let b:oldbin=&bin
		" set new options
		setlocal binary " make sure it overrides any textwidth, etc.
		let &ft="xxd"
		" set status
		let b:editHex=1
		" switch to hex editor
		%!xxd -g 1
	else
		" restore old options
		let &ft=b:oldft
		if !b:oldbin
			setlocal nobinary
		endif
		" set status
		let b:editHex=0
		" return to normal editing
		%!xxd -r
	endif
	" restore values for modified and read only state
	let &mod=l:modified
	let &readonly=l:oldreadonly
	let &modifiable=l:oldmodifiable
endfunction

nmap <leader>h :Hexmode<CR>

" Macro expansion for C/C++ [[[1
" http://vim.wikia.com/wiki/Macro_expansion_C/C%2B%2B
function! ExpandCMacro()
	"get current info
	let l:macro_file_name = "__macroexpand__" . tabpagenr()
	let l:file_row = line(".")
	let l:file_name = expand("%")
	let l:file_window = winnr()
	"create mark
	execute "normal! Oint " . l:macro_file_name . ";"
	execute "w"
	"open tiny window ... check if we have already an open buffer for macro
	if bufwinnr( l:macro_file_name ) != -1
		execute bufwinnr( l:macro_file_name) . "wincmd w"
		setlocal modifiable
		execute "normal! ggdG"
	else
		execute "bot 10split " . l:macro_file_name
		execute "setlocal filetype=cpp"
		execute "setlocal buftype=nofile"
		nnoremap <buffer> q :q!<CR>
	endif
	"read file with gcc
	silent! execute "r!gcc -E " . l:file_name
	"keep specific macro line
	execute "normal! ggV/int " . l:macro_file_name . ";$\<CR>d"
	execute "normal! jdG"
	"indent
	"for GNU indent only:
	"execute "%!indent -st -kr"
	execute "%!indent -st"
	execute "normal! gg=G"
	"resize window
	execute "normal! G"
	let l:macro_end_row = line(".")
	execute "resize " . l:macro_end_row
	execute "normal! gg"
	"no modifiable
	setlocal nomodifiable
	"return to origin place
	execute l:file_window . "wincmd w"
	execute l:file_row
	execute "normal!u"
	execute "w"
	"highlight origin line
	let @/ = getline('.')
endfunction
autocmd FileType cpp nnoremap <leader>m :call ExpandCMacro()<CR>
autocmd FileType c nnoremap <leader>m :call ExpandCMacro()<CR>

" -- TAGBAR -- [[[1
" map C-L to toggle the tagbar list
nmap <leader>l :TagbarToggle<CR>
"let g:tagbar_type_css = {
"\ 'ctagstype' : 'Css',
"	\ 'kinds' : [
"		\ 'c:classes',
"		\ 's:selectors',
"		\ 'i:identities'
"	\ ]
"\ }
let g:tagbar_type_markdown = {
	\ 'ctagstype' : 'markdown',
	\ 'kinds' : [
		\ 'h:Heading_L1',
		\ 'i:Heading_L2',
		\ 'k:Heading_L3'
	\ ]
\ }

" -- UNDOTREE -- [[[1
nmap <leader>u :UndotreeToggle<CR>

" -- SYNTASTIC -- [[[1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_c_config_file = '.clang_complete'
let g:syntastic_c_compiler = 'clang'
let g:syntastic_c_check_header = 1
let g:syntastic_c_auto_refresh_includes = 1
let g:syntastic_c_no_include_search = 1
let g:syntastic_cpp_config_file = '.clang_complete'
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_auto_refresh_includes = 1
let g:syntastic_c_no_include_search = 1
let g:syntastic_java_javac_config_file_enabled = 1
let g:syntastic_perl_checkers = ['perl', 'perlcritic']
let g:syntastic_enable_perl_checker = 1
let g:syntastic_go_checkers = ['go']
let g:syntastic_html_tidy_ignore_errors = [
	\"trimming empty <i>",
	\"trimming empty <span>",
	\"<iframe> proprietary attribute \"allowfullscreen\"",
	\"<textarea> proprietary attribute \"placeholder\"",
\]

if exists('g:syntastic_extra_filetypes')
	call add(g:syntastic_extra_filetypes, 'herc')
	call add(g:syntastic_extra_filetypes, 'ath')
else
	let g:syntastic_extra_filetypes = ['herc', 'ath']
endif

" hex2dec/dec2hex [[[1
command! -nargs=? -range Dec2hex call s:Dec2hex(<line1>, <line2>, '<args>')
function! s:Dec2hex(line1, line2, arg) range
	if empty(a:arg)
		if histget(':', -1) =~# "^'<,'>" && visualmode() !=# 'V'
			let cmd = 's/\%V\<\d\+\>/\=printf("0x%x",submatch(0)+0)/g'
		else
			let cmd = 's/\<\d\+\>/\=printf("0x%x",submatch(0)+0)/g'
		endif
		try
			execute a:line1 . ',' . a:line2 . cmd
		catch
			echo 'Error: No decimal number found'
		endtry
	else
		echo printf('%x', a:arg + 0)
	endif
endfunction

command! -nargs=? -range Hex2dec call s:Hex2dec(<line1>, <line2>, '<args>')
function! s:Hex2dec(line1, line2, arg) range
	if empty(a:arg)
		if histget(':', -1) =~# "^'<,'>" && visualmode() !=# 'V'
			let cmd = 's/\%V0x\x\+/\=submatch(0)+0/g'
		else
			let cmd = 's/0x\x\+/\=submatch(0)+0/g'
		endif
		try
			execute a:line1 . ',' . a:line2 . cmd
		catch
			echo 'Error: No hex number starting "0x" found'
		endtry
	else
		echo (a:arg =~? '^0x') ? a:arg + 0 : ('0x'.a:arg) + 0
	endif
endfunction

" vim-airline [[[1
set laststatus=2
set noshowmode
let g:airline_mode_map = {
	\ '__' : '----',
	\ 'c'  : 'CMD ',
	\ 'i'  : 'INS ',
	\ 'ic' : 'INSC',
	\ 'ix' : 'INSC',
	\ 'n'  : 'NORM',
	\ 'ni' : '+INS',
	\ 'no' : '> OP',
	\ 'R'  : 'REPL',
	\ 'Rv' : 'V-RP',
	\ 's'  : 'SEL ',
	\ 'S'  : 'S-LN',
	\ '' : 'S-BL',
	\ 't'  : 'TERM',
	\ 'v'  : 'VIS ',
	\ 'V'  : 'V-LN',
	\ '' : 'V-BL',
\ }
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
" unicode symbols
if has("win32")
	let g:airline_left_sep = '»'
	let g:airline_right_sep = '«'
	let g:airline_symbols.paste = 'ρ'
	let g:airline_symbols.branch = 'µ'
	let g:airline_symbols.whitespace = 'Ξ'
else
	"let g:airline_left_sep = '»'
	"let g:airline_left_sep = '▶'
	"let g:airline_left_sep = '⡷'
	let g:airline_left_sep = '》'
	"let g:airline_right_sep = '«'
	"let g:airline_right_sep = '◀'
	"let g:airline_right_sep = '⢾'
	let g:airline_right_sep = '《'
	let g:airline_symbols.branch = '⎇'
	"let g:airline_symbols.paste = 'ρ'
	"let g:airline_symbols.paste = 'Þ'
	let g:airline_symbols.paste = '∥'
	"let g:airline_symbols.whitespace = 'Ξ'
endif
"let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_theme='wombat'
let g:airline#extensions#whitespace#mixed_indent_algo = 2
let g:airline#extensions#whitespace#trailing_format = 'trail[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mix-ind[%s]'
let g:airline#extensions#whitespace#mixed_indent_file_format = 'mix-ind-file[%s]'
let g:airline#extensions#c_like_langs = [ 'c', 'cpp', 'cuda', 'javascript', 'ld', 'php', 'c.doxygen', 'cpp.doxygen', 'ath', 'herc' ]
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':p:.'
let g:airline#extensions#tabline#buffer_idx_mode = 1

" Airline customization (FIXME)

" This function will be invoked just prior to the statusline getting modified.
function! MyAirlineBufCountApply(...)
	" We want to append to section_c, first we check if there's already a window-local override, and if not, create it off of the global section_c.
	let w:airline_section_z = get(w:, 'airline_section_z', g:airline_section_z)

	" Then we just append this extenion to it, optionally using separators.
	let w:airline_section_z .= g:airline_right_alt_sep . g:airline_symbols.space . '[%{MyAirlineBufCount_get_bufcount()}]'
endfunction

" Finally, this function will be invoked from the statusline.
function! MyAirlineBufCount_get_bufcount()
	let l:bufcount = 0
	for i in range(1, bufnr('$'))
		if buflisted(i)
			let l:bufcount = l:bufcount + 1
		endif
	endfor
	return l:bufcount
endfunction

" Here we define a new part for the plugin.  This allows users to place this extension in arbitrary locations.
" call airline#parts#define_raw('mybufcount', '%{MyAirlineBufCount_get_bufcount()}')
" Next up we add a funcref so that we can run some code prior to the statusline getting modifed.
call airline#add_statusline_func('MyAirlineBufCountApply')
" You can also add a funcref for inactive statuslines.
" call a:ext.add_inactive_statusline_func('MyAirlineBufCountUnapply')

set hidden
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab
"following lines transfered to .gvimrc
"if has("gui_macvim")
"	macmenu Window.Select\ Previous\ Tab key=<nop>
"	macmenu Window.Select\ Next\ Tab key=<nop>
"	map <D-{> <Plug>AirlineSelectPrevTab
"	map <D-}> <Plug>AirlineSelectNextTab
"endif

" Gitv [[[1
let g:Gitv_OpenPreviewOnLaunch = 1

set lazyredraw

" netrw :Explore [[[1
noremap <leader>n :NERDTreeToggle<CR>
"noremap <leader>n :Lexplore<CR>
"let g:netrw_liststyle = 3 " Tree style

" EasyAlign [[[1
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" QuickHL [[[1
" Toggle QuickHL current word
nmap <leader>w :QuickhlCwordToggle<CR>
nmap <Space>m <Plug>(quickhl-manual-this-whole-word)
xmap <Space>m <Plug>(quickhl-manual-this-whole-word)
nmap <Space>M <Plug>(quickhl-manual-reset)
xmap <Space>M <Plug>(quickhl-manual-reset)

" Incsearch [[[1
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Streak [[[1
let g:sneak#streak = 1
let g:sneak#prompt = 'Sneak> '
let g:sneak#textobject_z = 1
nmap s <Plug>(SneakStreak)
nmap S <Plug>(SneakStreakBackward)

" Unite [[[1
"call unite#filters#matcher_default#use(['matcher_fuzzy'])
let g:unite_enable_auto_select = 0
nnoremap <Leader>t :<C-u>Unite -prompt-focus -direction=botright -split -no-hide-icon -buffer-name=files   -start-insert file_rec/async:!<CR>
nnoremap <Leader>f :<C-u>Unite -prompt-focus -direction=botright -split -no-hide-icon -buffer-name=files   -start-insert file<CR>
"nnoremap <Leader>r :<C-u>Unite -prompt-focus -direction=botright -split -no-hide-icon -buffer-name=mru     -start-insert file_mru<CR>
nnoremap <Leader>o :<C-u>Unite -prompt-focus -direction=botright -split -no-hide-icon -buffer-name=outline -start-insert outline<CR>
nnoremap <Leader>y :<C-u>Unite -prompt-focus -direction=botright -split -no-hide-icon -buffer-name=yank    history/yank<CR>
nnoremap <Leader>b :<C-u>Unite -prompt-focus -direction=botright -split -no-hide-icon -buffer-name=buffer  buffer<CR>
nnoremap <Leader>g :<C-u>Unite -prompt-focus -direction=botright -split -no-hide-icon -buffer-name=grep    grep/git:.<CR>
nnoremap <Leader>/ :<C-u>Unite -prompt-focus -direction=botright -split -no-hide-icon -buffer-name=grep    grep:.<CR>

augroup unite_plug_load
	" Q: I want to match candidates by filename.
	autocmd! User unite.vim call unite#custom#source(
		\ 'buffer,file_rec/async,file_rec', 'matchers',
		\ ['converter_tail', 'matcher_default'])
	autocmd! User unite.vim call unite#custom#source(
		\ 'file_rec/async,file_rec', 'converters',
		\ ['converter_file_directory'])
augroup END

" Custom mappings for the unite buffer
"autocmd FileType unite call s:unite_settings()
"function! s:unite_settings()
"  " Enable navigation with control-j and control-k in insert mode
"  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
"  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
"endfunction

" Debug [[[1
"nnoremap <silent> <leader>DD :exe ":profile start profile.log"<cr>:exe ":profile func *"<cr>:exe ":profile file *"<cr>
"nnoremap <silent> <leader>DQ :exe ":profile pause"<cr>:noautocmd qall!<cr>

" End of settings ]]]1

" Source local configuration
if filereadable(expand("~/.vimrc.local"))
	exe 'source' "~/.vimrc.local"
endif

" vim: set ft=vim foldmethod=marker foldenable foldmarker=[[[,]]] :
