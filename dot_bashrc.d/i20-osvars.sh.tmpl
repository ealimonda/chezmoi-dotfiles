#*******************************************************************************************************************
#* Config files                                                                                                    *
#*******************************************************************************************************************
#* File:             i20-osvars.sh                                                                                 *
#* Copyright:        (c) 2011-2012 alimonda.com; Emanuele Alimonda                                                 *
#*                   Public Domain                                                                                 *
#*******************************************************************************************************************

# Make commands more colorful
alias grep='grep --color=auto'
shopt -s checkwinsize

{{ if eq .chezmoi.os "darwin" -}}
alias ls='ls --color=auto'
export CLICOLOR=1
#export TERM='xterm-256color'

# http://blog.warrenmoore.net/blog/2010/01/09/make-terminal-follow-aliases-like-symlinks/
function cd {
	if [ ${#1} == 0 ]; then
		builtin cd
	elif [ -d "${1}" ]; then
		builtin cd "${1}"
	elif [[ -f "${1}" || -L "${1}" ]]; then
		path=$(getTrueName "$1")
		builtin cd "$path"
	else
		builtin cd "${1}"
	fi
}

function intmux {
	[ -n "$1" -a -d "$1" ] && cd "$1"
	# Check for session
	if ! tmux has -t stuff >&- 2>&-; then
		# Start a new session
		tmuxattach --onlystart
	fi
	tmux new-window -t stuff && tmux rename-window -t stuff "($(basename "$PWD"))"
}

function dequarantine {
	while [ $# -gt 0 ]; do
		THISFILE="$1"
		shift
		[ -z "$THISFILE" -o ! -e "$THISFILE" ] && continue
		xattr -d com.apple.quarantine "$THISFILE" 2>/dev/null
	done
}


#export OSXSDK="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk"
function osxsdk {
	echo "$(xcodebuild -version $(xcodebuild -showsdks 2>/dev/null | awk '/^$/{p=0};p; /macOS SDKs:/{p=1}' | tail -1 | cut -f3) Path 2>/dev/null)"
}

# Perl local::lib
eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)

# Homebrew
#export HOMEBREW_AUTO_UPDATE_SECS=3600
export HOMEBREW_NO_AUTO_UPDATE=1
export HOMEBREW_NO_EMOJI=1
export HOMEBREW_NO_GITHUB_API=1
export HOMEBREW_NO_INSTALL_CLEANUP=1
export HOMEBREW_NO_INSTALL_UPGRADE=1
export HOMEBREW_TEMP=/usr/local/temp
{{- else if .chezmoi.os "linux" -}}
# Some stuff from the Ubuntu bashrc
if grep -q -s DISTRIB_ID=Ubuntu /etc/lsb-release; then
	function tarcrypt {
		if [ -z "$1" -o -z "$2" ]; then
			echo "Usage: $0 input_dir output_file.tgz.aes"
			return
		fi
		if [ ! -d "$1" ]; then
			echo "Input dir does not exist"
			return
		fi
		tar cz "$1" | openssl enc -aes-256-cbc -salt | dd of="$2" && rm -rf "$1"
	}
	function tardecrypt {
		if [ -z "$1" ]; then
			echo "Usage: $0 input_file.tgz.aes"
			return
		fi
		if [ ! -f "$1" ]; then
			echo "Input file does not exist"
			return
		fi
		dd if="$1" | openssl enc -d -aes-256-cbc | tar xzf - && rm "$1"
	}

	# don't put duplicate lines or lines starting with space in the history.
	# See bash(1) for more options
	HISTCONTROL=ignoreboth

	# append to the history file, don't overwrite it
	shopt -s histappend

	# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
	HISTSIZE=1000
	HISTFILESIZE=2000

	# If set, the pattern "**" used in a pathname expansion context will
	# match all files and zero or more directories and subdirectories.
	#shopt -s globstar

	# make less more friendly for non-text input files, see lesspipe(1)
	[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

	# set variable identifying the chroot you work in (used in the prompt below)
	if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
		debian_chroot=$(cat /etc/debian_chroot)
	fi

	# set a fancy prompt (non-color, unless we know we "want" color)
	case "$TERM" in
		xterm-color) color_prompt=yes;;
	esac

	# uncomment for a colored prompt, if the terminal has the capability; turned
	# off by default to not distract the user: the focus in a terminal window
	# should be on the output of commands, not on the prompt
	force_color_prompt=yes

	if [ -n "$force_color_prompt" ]; then
		 if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
			# We have color support; assume it's compliant with Ecma-48
			# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
			# a case would tend to support setf rather than setaf.)
			color_prompt=yes
		else
			color_prompt=
		fi
	fi

	if [ "$color_prompt" = yes ]; then
		PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
		#PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
	else
		PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
	fi
	unset color_prompt force_color_prompt

	# If this is an xterm set the title to user@host:dir
	case "$TERM" in
		xterm*|rxvt*)
			PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
			;;
		*)
			;;
	esac

	# enable color support of ls and also add handy aliases
	if [ -x /usr/bin/dircolors ]; then
		test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"

		alias fgrep='fgrep --color=auto'
		alias egrep='egrep --color=auto'
	fi

	# Add an "alert" alias for long running commands.  Use like so:
	#   sleep 10; alert
	alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

	# Alias definitions.
	# You may want to put all your additions into a separate file like
	# ~/.bash_aliases, instead of adding them here directly.
	# See /usr/share/doc/bash-doc/examples in the bash-doc package.

	if [ -f ~/.bash_aliases ]; then
		. ~/.bash_aliases
	fi

	# enable programmable completion features (you don't need to enable
	# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
	# sources /etc/bash.bashrc).
	if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
		. /etc/bash_completion
	fi
fi
{{- end }}

# vim: ts=4 sw=4
